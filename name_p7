#include <stdio.h>
#include <string.h>
#include <gsl/gsl_matrix.h>
#include <gsl/gsl_blas.h>

int main() {
    char vectors[] = "r s u v w";

    int r[] = {-1, -2};
    int s[] = {-3, 3};
    int u[] = {2, -1};
    int v[] = {3, 1};
    int w[] = {1, 3};

    int num_vectors = 5;

    // Calculate dot products and write to files
    for (int i = 0; i < num_vectors; i++) {
        for (int j = i + 1; j < num_vectors; j++) {
            int result = 0;
            for (int k = 0; k < 2; k++) {
                result += vectors[i * 3 + k] * vectors[j * 3 + k];
            }

            char output_filename[20];
            sprintf(output_filename, "name_p7_outD%c%c.txt", vectors[i * 3], vectors[j * 3]);

            FILE *output_file = fopen(output_filename, "w");
            if (output_file == NULL) {
                printf("Error opening output file %s.", output_filename);
                return 1;
            }

            fprintf(output_file, "%d\n", result);
            fclose(output_file);
        }
    }

    // Transpose Matrices using GSL
    char first_name[] = "Nicholas";
    char last_name[] = "Bennings";

    int rows = strlen(last_name);
    int columns = strlen(first_name);

    // Create matrices
    gsl_matrix *mat1 = gsl_matrix_alloc(rows, columns);
    gsl_matrix *mat2 = gsl_matrix_alloc(rows, columns);
    gsl_matrix *mat3 = gsl_matrix_alloc(2, 4);
    gsl_matrix *mat4 = gsl_matrix_alloc(4, 2);

    // Read matrices from files
    FILE *file1 = fopen("nbennings_mat1.txt", "r");
    FILE *file2 = fopen("nbennings_mat2.txt", "r");
    FILE *file3 = fopen("nbennings_mat3.txt", "r");
    FILE *file4 = fopen("nbennings_mat4.txt", "r");

    if (file1 == NULL || file2 == NULL || file3 == NULL || file4 == NULL) {
        printf("Error opening input files.");
        return 1;
    }

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < columns; j++) {
            int value;
            if (fscanf(file1, "%d", &value) != 1) {
                printf("Error reading Mat1 from input file.");
                fclose(file1);
                fclose(file2);
                fclose(file3);
                fclose(file4);
                return 1;
            }
            gsl_matrix_set(mat1, i, j, (double)value);
        }
    }

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < columns; j++) {
            int value;
            if (fscanf(file2, "%d", &value) != 1) {
                printf("Error reading Mat2 from input file.");
                fclose(file1);
                fclose(file2);
                fclose(file3);
                fclose(file4);
                return 1;
            }
            gsl_matrix_set(mat2, i, j, (double)value);
        }
    }

    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 4; j++) {
            int value;
            if (fscanf(file3, "%d", &value) != 1) {
                printf("Error reading Mat3 from input file.");
                fclose(file1);
                fclose(file2);
                fclose(file3);
                fclose(file4);
                return 1;
            }
            gsl_matrix_set(mat3, i, j, (double)value);
        }
    }

    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 2; j++) {
            int value;
            if (fscanf(file4, "%d", &value) != 1) {
                printf("Error reading Mat4 from input file.");
                fclose(file1);
                fclose(file2);
                fclose(file3);
                fclose(file4);
                return 1;
            }
            gsl_matrix_set(mat4, i, j, (double)value);
        }
    }

    fclose(file1);
    fclose(file2);
    fclose(file3);
    fclose(file4);

    // Transpose matrices using GSL
    gsl_matrix *mat1_transpose = gsl_matrix_alloc
