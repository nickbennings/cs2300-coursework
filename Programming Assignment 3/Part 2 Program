using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

class LeastSquaresRegression
{
    static void Main()
    {
        // Part 2 - Least Squares Regression Analysis
        List<Tuple<double, double>> dataPoints = ReadDataPoints("data_points.txt");

        double[,] X_matrix = CreateXMatrix(dataPoints);
        double[,] Y_matrix = CreateYMatrix(dataPoints);

        double[,] X_transpose = TransposeMatrix(X_matrix);
        double[,] X_transpose_X = MultiplyMatrices(X_transpose, X_matrix);
        double[,] inverse_X_transpose_X = InverseMatrix(X_transpose_X);
        double[,] A = MultiplyMatrices(MultiplyMatrices(inverse_X_transpose_X, X_transpose), Y_matrix);

        Console.WriteLine("\nPart 2 - Least Squares Regression Line:");
        double a0 = A[0, 0];
        double a1 = A[1, 0];
        Console.WriteLine($"Y = {a0} + {a1}x");

    }

    static List<Tuple<double, double>> ReadDataPoints(string filename)
    {
        string[] lines = File.ReadAllLines(filename);

        return lines.Select(line =>
        {
            string[] values = line.Split(',');
            double x = double.Parse(values[0]);
            double y = double.Parse(values[1]);
            return Tuple.Create(x, y);
        }).ToList();
    }

    static double[,] CreateXMatrix(List<Tuple<double, double>> dataPoints)
    {
        int rows = dataPoints.Count;
        int cols = 2;

        double[,] matrix = new double[rows, cols];

        for (int i = 0; i < rows; i++)
        {
            matrix[i, 0] = 1; // constant term
            matrix[i, 1] = dataPoints[i].Item1; // x value
        }

        return matrix;
    }

    static double[,] CreateYMatrix(List<Tuple<double, double>> dataPoints)
    {
        int rows = dataPoints.Count;
        int cols = 1;

        double[,] matrix = new double[rows, cols];

        for (int i = 0; i < rows; i++)
        {
            matrix[i, 0] = dataPoints[i].Item2; // y value
        }

        return matrix;
    }

    static double[,] TransposeMatrix(double[,] matrix)
    {
        int rows = matrix.GetLength(0);
        int cols = matrix.GetLength(1);

        double[,] result = new double[cols, rows];

        for (int i = 0; i < rows; i++)
        {
            for (int j = 0; j < cols; j++)
            {
                result[j, i] = matrix[i, j];
            }
        }

        return result;
    }

    static double[,] MultiplyMatrices(double[,] matrix1, double[,] matrix2)
    {
        int rows1 = matrix1.GetLength(0);
        int cols1 = matrix1.GetLength(1);
        int rows2 = matrix2.GetLength(0);
        int cols2 = matrix2.GetLength(1);

        if (cols1 != rows2)
        {
            throw new InvalidOperationException("Matrix dimensions are not compatible for multiplication.");
        }

        double[,] result = new double[rows1, cols2];

        for (int i = 0; i < rows1; i++)
        {
            for (int j = 0; j < cols2; j++)
            {
                double sum = 0;
                for (int k = 0; k < cols1; k++)
                {
                    sum += matrix1[i, k] * matrix2[k, j];
                }
                result[i, j] = sum;
            }
        }

        return result;
    }

    static double[,] InverseMatrix(double[,] matrix)
    {
        int n = matrix.GetLength(0);
        double[,] augmentedMatrix = new double[n, 2 * n];

        // Create an augmented matrix
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                augmentedMatrix[i, j] = matrix[i, j];
                augmentedMatrix[i, j + n] = (i == j) ? 1 : 0;
            }
        }

        // Apply Gauss-Jordan elimination
        for (int i = 0; i < n; i++)
        {
            double pivot = augmentedMatrix[i, i];

            // Divide the row by the pivot value to make the pivot 1
            for (int j = 0; j < 2 * n; j++)
            {
                augmentedMatrix[i, j] /= pivot;
            }

            // Subtract other rows to make their pivot values 0
            for (int k = 0; k < n; k++)
            {
                if (k != i)
                {
                    double factor = augmentedMatrix[k, i];
                    for (int j = 0; j < 2 * n; j++)
                    {
                        augmentedMatrix[k, j] -= factor * augmentedMatrix[i, j];
                    }
                }
            }
        }

        // Extract the inverse matrix from the augmented matrix
        double[,] inverseMatrix = new double[n, n];
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                inverseMatrix[i, j] = augmentedMatrix[i, j + n];
            }
        }

        return inverseMatrix;
    }
}
