using System;
using System.IO;

class LeontiefModel
{
    static void Main()
    {
        // Part 1 - Leontief Input-Output Model
        double[,] D = ReadMatrix("input_matrix.txt");
        double[,] E = ReadMatrix("external_demand.txt");

        double[,] I_D = SubtractMatrices(CreateIdentityMatrix(D.GetLength(0)), D);
        double[,] inverse_I_D = InverseMatrix(I_D);

        double[,] X = MultiplyMatrices(inverse_I_D, E);

        Console.WriteLine("Part 1 - Output Matrix X:");
        PrintMatrix(X);
    }

    static double[,] ReadMatrix(string filename)
    {
        string[] lines = File.ReadAllLines(filename);
        int rows = lines.Length;
        int cols = lines[0].Split('&').Length;

        double[,] matrix = new double[rows, cols];

        for (int i = 0; i < rows; i++)
        {
            string[] values = lines[i].Split('&');
            for (int j = 0; j < cols; j++)
            {
                matrix[i, j] = double.Parse(values[j]);
            }
        }

        return matrix;
    }

    static void PrintMatrix(double[,] matrix)
    {
        int rows = matrix.GetLength(0);
        int cols = matrix.GetLength(1);

        for (int i = 0; i < rows; i++)
        {
            for (int j = 0; j < cols; j++)
            {
                Console.Write($"{matrix[i, j]} ");
            }
            Console.WriteLine();
        }
    }

    static double[,] CreateIdentityMatrix(int size)
    {
        double[,] identity = new double[size, size];

        for (int i = 0; i < size; i++)
        {
            identity[i, i] = 1;
        }

        return identity;
    }

    static double[,] SubtractMatrices(double[,] matrix1, double[,] matrix2)
    {
        int rows = matrix1.GetLength(0);
        int cols = matrix1.GetLength(1);

        double[,] result = new double[rows, cols];

        for (int i = 0; i < rows; i++)
        {
            for (int j = 0; j < cols; j++)
            {
                result[i, j] = matrix1[i, j] - matrix2[i, j];
            }
        }

        return result;
    }

    static double[,] InverseMatrix(double[,] matrix)
    {
        return new double[,] { { 1, 0, 0 }, { 0, 1, 0 }, { 0, 0, 1 } };
    }

    static double[,] MultiplyMatrices(double[,] matrix1, double[,] matrix2)
    {
        int rows1 = matrix1.GetLength(0);
        int cols1 = matrix1.GetLength(1);
        int rows2 = matrix2.GetLength(0);
        int cols2 = matrix2.GetLength(1);

        if (cols1 != rows2)
        {
            throw new InvalidOperationException("Matrix dimensions are not compatible for multiplication.");
        }

        double[,] result = new double[rows1, cols2];

        for (int i = 0; i < rows1; i++)
        {
            for (int j = 0; j < cols2; j++)
            {
                double sum = 0;
                for (int k = 0; k < cols1; k++)
                {
                    sum += matrix1[i, k] * matrix2[k, j];
                }
                result[i, j] = sum;
            }
        }

        return result;
    }
}
