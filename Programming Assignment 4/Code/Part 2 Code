using System;
using System.IO;
using System.Linq;

class Program
{
    static void Main()
    {
        /// Example usage for Part 2
        Part2();
    }

    /// Part 2
    static void Part2()
    {
        var inputFilename3 = "input3.txt";
        Part2_PageRank(inputFilename3);
    }

    /// Part 2 - PageRank

    
    /// Implements the Google PageRank algorithm using the power method.
  
    static void Part2_PageRank(string inputFilename)
    {
        /// Read the matrix from the input file
        var matrix = File.ReadLines(inputFilename)
            .Select(line => line.Split().Select(double.Parse).ToArray())
            .ToArray();

        /// Check if the matrix is valid
        if (matrix.Any(row => row.Any(element => element < 0)) || !matrix.All(row => Math.Abs(row.Sum() - 1) < 1e-6))
        {
            Console.WriteLine("Invalid input");
            return;
        }

        /// Transpose the matrix for eigenvalue decomposition
        var transposedMatrix = Transpose(matrix);

        /// Calculate eigenvalues and eigenvectors
        var eigenvalues = Eigenvalues(transposedMatrix);
        var eigenvectors = Eigenvectors(transposedMatrix, eigenvalues);

        /// Get the stationary distribution vector
        var stationaryDistribution = Normalize(eigenvectors[0]);

        /// Get the indices sorted by rank
        var sortedIndices = Enumerable.Range(0, stationaryDistribution.Length)
            .OrderByDescending(i => stationaryDistribution[i])
            .ToArray();

        /// Output the results
        Console.WriteLine("Stationary Distribution:");
        Console.WriteLine(string.Join(" ", stationaryDistribution.Select(val => $"{val:.0000}")));

        Console.WriteLine("Sorted Indices by Rank:");
        Console.WriteLine(string.Join(" ", sortedIndices));
    }

    /// Helper functions

   
    /// Normalize a vector.
    static double[] Normalize(double[] vector)
    {
        var magnitude = Math.Sqrt(vector.Sum(x => x * x));
        return vector.Select(x => x / magnitude).ToArray();
    }

   
    /// Calculate the product of a scalar and a vector.
    static double[] Multiply(double scalar, double[] vector)
    {
        return vector.Select(x => x * scalar).ToArray();
    }


    /// Transpose a matrix.
    static double[][] Transpose(double[][] matrix)
    {
        return Enumerable.Range(0, matrix[0].Length)
            .Select(i => matrix.Select(row => row[i]).ToArray())
            .ToArray();
    }


    /// Calculate the eigenvalues of a matrix.
    static double[] Eigenvalues(double[][] matrix)
    {
        var eigenvalueDecomposition = new Accord.Math.Decompositions.EigenvalueDecomposition(matrix);
        return ((double[])eigenvalueDecomposition.RealEigenvalues).ToArray();
    }

    /// Calculate the eigenvectors of a matrix.
    static double[][] Eigenvectors(double[][] matrix, double[] eigenvalues)
    {
        var eigenvalueDecomposition = new Accord.Math.Decompositions.EigenvalueDecomposition(matrix);
        return ((double[][])eigenvalueDecomposition.Eigenvectors).ToArray();
    }
}
