// name_p7
using System;
using System.IO;
using System.Linq;

namespace MatrixAlgebraAssignment.name_p7
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Choose an operation: 'D' for Dot Product, 'T' for Transpose");
            char operation = char.ToUpper(Console.ReadKey().KeyChar);
            Console.WriteLine();

            Console.WriteLine("Choose the matrix (1-4) to use: ");
            int matrixNumber = int.Parse(Console.ReadLine());

            string inputFile = "name_p6_mat" + matrixNumber + ".txt";

            switch (operation)
            {
                case 'D':
                    Console.WriteLine("Choose two vectors to calculate the dot product (r, s, u, v, w). Enter the letters separated by a space (e.g., r s): ");
                    string[] chosenVectors = Console.ReadLine().Split(' ');
                    string outputFileDotProduct = "name_p7_outD" + matrixNumber + chosenVectors.Aggregate("", (current, c) => current + c) + ".txt";
                    CalculateDotProduct(inputFile, chosenVectors, outputFileDotProduct);
                    Console.WriteLine("Dot product calculation completed and saved to " + outputFileDotProduct);
                    break;

                case 'T':
                    string outputFileTranspose = "name_p7_outT" + matrixNumber + ".txt";
                    TransposeMatrix(inputFile, outputFileTranspose);
                    Console.WriteLine("Matrix transposed and saved to " + outputFileTranspose);
                    break;

                default:
                    Console.WriteLine("Invalid operation.");
                    break;
            }
        }

        private static void CalculateDotProduct(string inputFile, string[] chosenVectors, string outputFile)
        {
            int[,] vectors = new int[2, 2];

            for (int i = 0; i < 2; i++)
            {
                string vectorFile = chosenVectors[i] + ".txt";
                int[] vectorValues = ReadVectorFromFile(vectorFile);

                if (vectorValues == null)
                {
                    Console.WriteLine("Error: Unable to read vector " + chosenVectors[i]);
                    return;
                }

                for (int j = 0; j < 2; j++)
                {
                    vectors[i, j] = vectorValues[j];
                }
            }

            int dotProduct = CalculateDotProduct(vectors);

            using (StreamWriter writer = new StreamWriter(outputFile))
            {
                writer.Write(dotProduct);
            }
        }

        private static void TransposeMatrix(string inputFile, string outputFile)
        {
            int[,] matrix = ReadMatrixFromFile(inputFile);

            if (matrix == null)
            {
                Console.WriteLine("Error: Unable to read the matrix.");
                return;
            }

            int rows = matrix.GetLength(0);
            int columns = matrix.GetLength(1);

            int[,] transposedMatrix = new int[columns, rows];

            for (int i = 0; i < rows; i++)
            {
                for (int j = 0; j < columns; j++)
                {
                    transposedMatrix[j, i] = matrix[i, j];
                }
            }

            WriteMatrixToFile(transposedMatrix, outputFile);
        }

        private static int[] ReadVectorFromFile(string fileName)
        {
            try
            {
                string[] lines = File.ReadAllLines(fileName);

                if (lines.Length != 1)
                    throw new Exception("Invalid vector file format.");

                string[] values = lines[0].Split(' ');

                if (values.Length != 2)
                    throw new Exception("Invalid vector file format.");

                int[] vector = new int[2];

                for (int i = 0; i < 2; i++)
                {
                    vector[i] = int.Parse(values[i]);
                }

                return vector;
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error: " + ex.Message);
                return null;
            }
        }

        private static int CalculateDotProduct(int[,] vectors)
        {
            int dotProduct = 0;

            for (int i = 0; i < 2; i++)
            {
                dotProduct += vectors[0, i] * vectors[1, i];
            }

            return dotProduct;
        }

        private static int[,] ReadMatrixFromFile(string fileName)
        {
            try
            {
                string[] lines = File.ReadAllLines(fileName);
                int rows = lines.Length;
                int columns = lines[0].Split(' ').Length;
                int[,] matrix = new int[rows, columns];

                for (int i = 0; i < rows; i++)
                {
                    string[] values = lines[i].Split(' ');

                    for (int j = 0; j < columns; j++)
                    {
                        matrix[i, j] = int.Parse(values[j]);
                    }
                }

                return matrix;
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error: " + ex.Message);
                return null;
            }
        }

        private static void WriteMatrixToFile(int[,] matrix, string fileName)
        {
            using (StreamWriter writer = new StreamWriter(fileName))
            {
                int rows = matrix.GetLength(0);
                int columns = matrix.GetLength(1);

                for (int i = 0; i < rows; i++)
                {
                    for (int j = 0; j < columns; j++)
                    {
                        writer.Write(matrix[i, j] + " ");
                    }
                    writer.WriteLine();
                }
            }
        }
    }
}
